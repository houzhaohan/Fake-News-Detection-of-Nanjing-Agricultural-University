# -*- coding: utf-8 -*-
# 虚假新闻生成

import csv
import random
import jieba
import re

# 内置小型中文词表
BUILTIN_DICT = [
    "中国", "世界", "国家", "发展", "经济", "社会", "人民", "建设", "文化", "科技",
    "教育", "工作", "企业", "市场", "政府", "管理", "创新", "服务", "解散", "释放",
    "问题", "研究", "政策", "改革", "项目", "投资", "资源", "环境", "保护", "安全",
    "网络", "国际", "合作", "交流", "领域", "中心", "系统", "技术", "工程", "产品",
    "质量", "标准", "组织", "机构", "人员", "能力", "水平", "提高", "加强", "推进",
    "实现", "促进", "提升", "完善", "保障", "支持", "推动", "深化", "扩大", "建立",
    "开展", "实施", "进行", "需要", "要求", "重要", "主要", "基本", "全面", "深入",
    "加快", "努力", "积极", "有效", "重大", "重点", "关键", "核心", "现代", "传统",
    "先进", "科学", "合理", "可持续", "和谐", "民主", "法治", "公平", "正义", "诚信",
    "文明", "健康", "幸福", "美丽", "绿色", "智能", "数字", "智慧", "全球", "区域",
    "城市", "农村", "社区", "家庭", "学校", "医院", "银行", "公司", "工厂", "商店",
    "交通", "运输", "能源", "电力", "通信", "媒体", "艺术", "体育", "旅游", "娱乐",
    "食品", "药品", "医疗", "卫生", "养老", "就业", "收入", "消费", "价格", "税收",
    "金融", "证券", "保险", "贸易", "出口", "进口", "竞争", "优势", "战略", "规划",
    "效应", "制造", "生产", "销售", "营销", "品牌", "客户", "需求", "价值", "成本",
    "效率", "效益", "利润", "增长", "稳定", "风险", "控制", "监督", "评估", "决策",
    "确定", "园林", "关系", "电量", "点亮", "终止", "保护", "经验", "成果", "贡献",
    "责任", "权利", "义务", "自由", "平等", "尊重", "信任", "理解", "支持", "帮助",
    "合作", "分享", "创新", "创造", "发明", "发现", "解决", "应对", "挑战", "机遇",
    "反映", "失败", "困难", "复杂", "简单", "容易", "快速", "缓慢", "直接", "间接",
    "公开", "透明", "公正", "独立", "客观", "主观", "积极", "消极", "正面", "负面",
    "长期", "短期", "中期", "当前", "未来", "过去", "现在", "时间", "空间", "地点",
    "原因", "结果", "影响", "作用", "关系", "联系", "区别", "相似", "不同", "变化",
    "趋势", "方向", "目标", "任务", "计划", "方案", "措施", "方法", "手段", "途径",
    "基础", "条件", "因素", "要素", "环节", "过程", "阶段", "状态", "情况", "事件",
    "事实", "真相", "观点", "意见", "建议", "批评", "表扬", "奖励", "惩罚", "法律",
    "法规", "政策", "制度", "体制", "机制", "模式", "形式", "内容", "本质", "现象",
    "数量", "质量", "程度", "范围", "规模", "速度", "效率", "效果", "能力", "水平",
    "态度", "意识", "观念", "思想", "理论", "实践", "实际", "现实", "理想", "梦想",
    "希望", "信心", "信念", "勇气", "坚持", "努力", "奋斗", "拼搏", "进取", "成功",
    "成就", "荣誉", "尊严", "人格", "性格", "情感", "情绪", "心理", "生理", "身体",
    "遗产", "物质", "文化", "艺术", "文学", "历史", "哲学", "宗教", "科学", "技术",
    "数学", "物理", "化学", "生物", "地理", "天文", "医学", "农业", "工业", "商业",
    "军事", "政治", "外交", "经济", "金融", "贸易", "教育", "体育", "娱乐", "旅游",
    "环境", "生态", "资源", "能源", "人口", "民族", "语言", "文字", "符号", "信息",
    "不同", "知识", "智慧", "创新", "创造", "发明", "发现", "设计", "制造", "生产",
    "销售", "服务", "管理", "经营", "投资", "消费", "储蓄", "借贷", "保险", "税收",
    "预算", "决算", "收入", "支出", "利润", "损失", "风险", "安全", "保障", "保护",
    "健康", "疾病", "治疗", "预防", "营养", "锻炼", "休息", "睡眠", "工作", "生活",
    "家庭", "婚姻", "爱情", "友情", "亲情", "社交", "沟通", "交流", "合作", "竞争",
    "冲突", "和平", "战争", "正义", "邪恶", "善良", "罪恶", "道德", "伦理", "法律",
    "权利", "义务", "自由", "平等", "民主", "专制", "人权", "主权", "国际", "国内",
    "全球", "地方", "中央", "地方", "城市", "农村", "社区", "校园", "医院", "公园",
    "道路", "桥梁", "建筑", "房屋", "车辆", "飞机", "船舶", "电脑", "手机", "网络",
    "软件", "硬件", "系统", "程序", "数据", "文件", "信息", "知识", "学习", "教育",
    "结束", "教学楼", "分析", "综合", "判断", "决策", "执行", "监督", "评估", "合理",
    "物联网", "进步", "变化", "稳定", "平衡", "协调", "标准", "多样", "复杂", "简单",
    "选举", "股票", "债券", "通胀", "衰退", "疫苗", "基因", "污染", "气候", "算法",
    "大数据", "云计算", "区块链", "虚拟现实", "社交媒体", "电子商务", "自动化", "机器人",
    "询问", "班级", "医生", "护士", "病人", "碳", "排放", "优化", "调整", "监控",
    "高效", "可靠", "音乐", "电影", "书籍", "青年", "妇女", "儿童", "休闲", "游戏",
    "改善", "减少", "增加", "维持", "环保","无人机"
]


# 构建真实新闻词汇表
def build_vocabulary(texts):
    vocab = set()
    for text in texts:
        words = jieba.lcut(text)
        for word in words:
            # 只保留中文词语（长度至少为2）
            if re.fullmatch(r'[\u4e00-\u9fa5]{2,}', word):
                vocab.add(word)
    return vocab


# 生成虚假文本
def generate_fake_text(real_text, vocab, external_word_list):
    # 分词并保留位置信息
    words = list(jieba.tokenize(real_text))
    if not words:
        return real_text

    # 创建替换后的文本
    fake_text = []
    last_end = 0

    # 统计中文词数量
    chinese_words = [w for w, s, e in words if re.fullmatch(r'[\u4e00-\u9fa5]{2,}', w)]
    total_chinese = len(chinese_words)
    if total_chinese == 0:
        return real_text

    # 计算需要替换的词数
    replace_count = max(1, int(total_chinese * 0.3))
    replaced = 0

    # 处理每个词
    for word, start, end in words:
        # 添加前面的非词语部分
        if start > last_end:
            fake_text.append(real_text[last_end:start])

        # 替换中文词语（不在原始词汇表中）
        if re.fullmatch(r'[\u4e00-\u9fa5]{2,}', word) and replaced < replace_count:
            # 从外部词表中选择不在原始词汇表中的词
            candidates = [w for w in external_word_list if w not in vocab]
            if candidates:
                replacement = random.choice(candidates)
                fake_text.append(replacement)
                replaced += 1
            else:
                fake_text.append(word)  # 没有可用替换词时保留原词
        else:
            fake_text.append(word)

        last_end = end

    # 添加最后部分的文本
    if last_end < len(real_text):
        fake_text.append(real_text[last_end:])

    return ''.join(fake_text)


def main():
    # 使用内置词表
    external_word_list = BUILTIN_DICT
    print(f"使用内置词表，共 {len(external_word_list)} 个词语")

    # 读取原始数据
    rows = []
    real_texts = []
    max_index = 0

    with open('news.csv', 'r', encoding='utf-8') as csvfile:
        reader = csv.reader(csvfile)
        header = next(reader)  # 读取标题行

        for row in reader:
            rows.append(row)
            index = int(row[0])
            if index > max_index:
                max_index = index

            # 收集真实新闻文本
            if row[2] == '0':
                real_texts.append(row[1])

    # 构建真实新闻词汇表
    vocab = build_vocabulary(real_texts)
    print(f"构建词汇表完成，共 {len(vocab)} 个真实新闻词语")

    # 生成虚假新闻
    new_rows = []
    for row in rows:
        if row[2] == '0':  # 只处理真实新闻
            fake_text = generate_fake_text(row[1], vocab, external_word_list)
            max_index += 1
            new_rows.append([str(max_index), fake_text, '1'])

    # 追加新数据到原文件
    with open('news.csv', 'a', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerows(new_rows)

    print(f"已生成 {len(new_rows)} 条虚假新闻并追加到文件")


if __name__ == "__main__":
    main()